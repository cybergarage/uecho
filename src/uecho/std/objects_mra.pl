#!/usr/bin/perl
# Copyright (C) The uecho Authors 2015
#
# This is licensed under BSD-style license, see file COPYING.

use utf8;
use JSON;
use File::Find;

if (@ARGV < 1){
  exit 1;
}
my $mra_root_dir = $ARGV[0];

print<<HEADER;
/******************************************************************
 *
 * uEcho for C
 *
 * Copyright (C) The uecho Authors 2015
 *
 * This is licensed under BSD-style license, see file COPYING.
 *
 * GENERATED FROM manufacturers.pl DO NOT EDIT THIS FILE.
 *
 ******************************************************************/

#include <uecho/std/_database.h>
#include <uecho/property.h>

#define PROP_REQUIRED "required"
#define PROP_MANDATORY "mandatory"
#define PROP_OPTIONAL "optional"

uEchoObject *uecho_standard_object_new(const char *name, int grp_code, int cls_code) {
  uEchoObject *obj;
  obj = uecho_object_new();
  uecho_object_setname(obj, name);
  uecho_object_setclassgroupcode(obj, grp_code);
  uecho_object_setclasscode(obj, cls_code);
  return obj;
}

uEchoProperty *uecho_standard_object_property_new(int epc, const char *name, const char *data_type, int data_size, const char *get_rule, const char *set_rule, const char *anno_rule) {
  uEchoProperty *prop;
  uEchoPropertyAttr attr = uEchoPropertyAttrNone;

  prop = uecho_property_new();
  uecho_property_setcode(prop, epc);
  uecho_property_setname(prop, name);

  if (uecho_streq(get_rule, PROP_REQUIRED) || uecho_streq(get_rule, PROP_REQUIRED))
    attr |= uEchoPropertyAttrReadRequired;
  if (uecho_streq(get_rule, PROP_OPTIONAL))
    attr |= uEchoPropertyAttrRead;
  if (uecho_streq(set_rule, PROP_REQUIRED) || uecho_streq(set_rule, PROP_REQUIRED))
    attr |= uEchoPropertyAttrWriteRequired;
  if (uecho_streq(set_rule, PROP_OPTIONAL))
    attr |= uEchoPropertyAttrWrite;
  if (uecho_streq(anno_rule, PROP_REQUIRED) || uecho_streq(anno_rule, PROP_REQUIRED))
    attr |= uEchoPropertyAttrAnnoRequired;
  if (uecho_streq(anno_rule, PROP_OPTIONAL))
    attr |= uEchoPropertyAttrAnno;
  uecho_property_setattribute(prop, attr);

  return prop;
}

void uecho_database_addstandardobjects(uEchoDatabase* db) {
  uEchoObject *obj;

HEADER

my @mra_sub_dirs = (
  "/mraData/superClass/",
  "/mraData/nodeProfile/",
  "/mraData/devices/"
);

my @device_json_files;
foreach my $mra_sub_dir(@mra_sub_dirs){
  my $mra_root_dir = $mra_root_dir . $mra_sub_dir;
  find sub {
      my $file = $_;
      my $path = $File::Find::name;
      if(-f $file){
        push(@device_json_files, $path);
      }
  }, $mra_root_dir;
}

foreach my $device_json_file(@device_json_files){
  open(DEV_JSON_FILE, $device_json_file) or die "$!";
  my $device_json_data = join('',<DEV_JSON_FILE>);
  close(DEV_JSON_FILE);
  my $device_json = decode_json($device_json_data);

  my $cls_names = %{$device_json}{'className'};
  my $cls_name = %{$cls_names}{'en'};
  my $grp_cls_code = %{$device_json}{'eoj'};
  my $grp_code = substr($grp_cls_code, 2, 2);
  my $cls_code = substr($grp_cls_code, 4);
  printf("  // %s (0x%s%s)\n", $cls_name, $grp_code, $cls_code);
  printf("  obj = uecho_standard_object_new(\"%s\", 0x%s, 0x%s);\n", $cls_name, $grp_code, $cls_code);

  my $props = %{$device_json}{'elProperties'};
  foreach $prop(@{$props}) {
    my $epc = %{$prop}{'epc'};
    my $names = %{$prop}{'propertyName'};
    my $name = %{$names}{'en'};
    my $rules = %{$prop}{'accessRule'};
    my $get_rule = %{$rules}{'get'};
    my $set_rule = %{$rules}{'set'};
    my $anno_rule = %{$rules}{'inf'};
    my $data_type = "";
    printf("  uecho_object_addproperty(obj, uecho_standard_object_property_new(%s, \"%s\", \"%s\", %d, \"%s\", \"%s\", \"%s\"));\n",
      $epc,
      $name,
      $data_type,
      $data_size,
      $get_rule,
      $set_rule,
      $anno_rule,
      );
   }
  printf("  uecho_database_addobject(db, obj);\n\n");
}

print<<FOTTER;
}
FOTTER